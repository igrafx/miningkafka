user  nginx;
worker_processes  auto;

error_log   /var/log/nginx/error.log        warn;

pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '$proxy_host $upstream_addr '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log  /var/log/nginx/access.log       main;
    access_log  /var/log/nginx/host_access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    # reduce verbosity
    server_tokens off;


    server_names_hash_bucket_size 128;

    # Using variables in proxy_pass permits nginx to start even if docker
    # containers such as grafana are down. See the follwing link:

    # https://dev.to/danielkun/nginx-everything-about-proxypass-2ona#let-nginx-start-even-when-not-all-upstream-hosts-are-available
    #
    # For this trick to work, one resolver directive must be set in Nginx
    # configuration file:
    resolver 127.0.0.11 ipv6=off;  

    # jupyter / websockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

      
  include /etc/nginx/conf.d/*;
}

